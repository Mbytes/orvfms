
#*************************************************************************
#  Copyright (C) 2015 by Fernando M. Silva   fcr@netcabo.pt                
#*************************************************************************

Last update: 18 October 2015

DISCLAIMER:

     This software was developed independently and it is not
     supported or endorsed in any way by Orvibo (C).

ACKNOWLEDGMENTS:
      This software was based on the information originally published 
      by Andrius Stikonas on 

https://stikonas.eu/wordpress/2015/02/24/reverse-engineering-orvibo-s20-socket/	
      and on comments and discussions by many other users. 

SUMMARY:
  This software implements a web interface to control Orvibo S20 
  sockets/switch attached to the local network. 

  The S20 switchs can be operated  in the local network using the freely
  available WiWo app. However, it is behavior when the user is outside
  the local network is much less convenient. Only switch on and switch off
  operations are remotely supported, and remote operations often fail due to
  timeout. In fact, remote operations through the WiWo app use a remote 
  Orvibo proxy which is often out of service or possibly blocked(?). 
  Moreover, the S20s  can not be operated from a regular desktop, 
  since only IOS or Android apps are supplied by Orvibo.

  The purpose of  this software is to setup a web interface, running 
  in a web server in the local network, which supports the most relevant 
  S20 actions (switch off/on and countdown timers). The web interface 
  is designed such that it may be operated from any web browser 
  (desktop,smartphone or pad). Furthermore, it reports accurately 
  all the satus of the S20s, something  the WiWo app often fails 
  to do. By making this web server available over the Internet, it is
  possible the remote, direct  and fast  operation of the S20s independently 
  of any Orvibo proprietary proxy or infrastructure.

  The web server can be installed on any computer supporting a web server
  with php, or on a cheap mini server (a Raspberry Pi, for example).

  This web interface reports the status of all S20 attached to the 
  network and supports ON/OFF actions of the detected devices. Moreover,
  it supports reporting and setting of countdown timers (both switch 
  on/off timers, as well as automatic switch off after on timer). All
  devices are automatically detected and, therefore, no configuration
  of individual devices is required. The web interface has a responsive 
  behavior to changing viewport sizes, therefore being well suited to either 
  desktops or smartphones. It divides the viewport in N horizontal buttons, 
  each one labeled with the  name automatically retrieved from the 
  connected S20s. Each button is shown in green or red according to the 
  current S20 status (green = ON).

  Examples of the web interface are available on web_screenshot.png and
  web_screenshot_2.png.
 
  See the SECURITY section  below for discussion of security issues.


CONTENTS :
The code contained herein includes the following directories:
    lib/orvfms
    -  a php library (orvfms.php) with a set of simple functions to 
       discover S20 device attached to the local network and retrieve of 
       S20 names, addresses and switch state. It also include functions to 
       switch ON/OFF each device and timer reporting and programming.

       This directory includes also a small utility library (util.php), 
       a test program (test.php) for testing the library and local S20s,
       and several auxiliary php files used by the main web 
       page (index.php);

    s20
    -  A php page (index.php) that implements a web interface 
       to monitor and control S20 sockets attached to the local 
       network; 
 
    css
    - The css stylesheet (orvfms.css) used by index.php;

    img
    - An icon for the timer clock (clock2.png);

TESTING THE CODE:

Before installing this code on a web server, please test if the library 
recognizes and is able to operate your S20s. For this purpose, run the 
test script test.php available in the lib/orvfms directory from the 
command line.  It looks for S20 devices connected to the local network, 
retrieves relevant data and  dump all collected information in readble 
format to the console.

Moreover, it makes a full power on  / power off cycle to all your S20s and
tests the timers with two 10 seconds countdowns cycles using a randomly 
choosed device. PLEASE TAKE INTO  ACCOUNT POSSIBLE SAFETY ISSUES  of the 
switching on/off cycle!  Unplug any devices or appliances that may be 
affected by this test cycle before running test.php.

In order to test this library from the command line, just open a  
terminal or console and take the following steps: 

1. Change the working directory (cd) to the lib/orvfms  directory;
2. Check the file globals.php and please confirm (or update) the broadcast 
   address. Unappily, there is no portable and "clean" way of finding it 
   automatically in the general case, since the host may have more than one 
   network interface. In many cases, the default setting (192.168.1.255)
   will do the job, but please confirm your local address. It will probably 
   be something similar to 192.168.X.255 with X=0 or X=1. In rare cases, 
   X may took other values, or the broadcast may be something like 
   172.16.XX.255 or 10.xx.xx.255.
3. Check if there are  not appliances connected to the S20 sockets that may 
   be affected by the power on/off cycle. Unplug any devices that may be 
   affected be this test cycle. Each off/on cycle switchs each S20 to
   the oposite state for about 5/10 seconds (exact figures depend on the
   number of S20s in the local network.		
4. Just type in the command line:

prompt> php-cgi test.php

(or replace php-cgi with the name of your php interpreter).

The output is quite straightforward, and possibly you are immediately able
to recognize most of it. You should also see/hear the usual switching on and 
off of the nearby S20s.  An example of the output of this script is included 
in the file orvfms/example.out.

INSTALLATION OF THE WEB PAGE:

The main web page is located in s20/index.php. 

The details of the installation will depend slightly on your HTTP server 
configuration and your own preferences. Anyway, just move the index.php, 
css/orvfms.css and  orvfms/lib/* to the directories that suit the local 
hierarchy and configuration of your HTTP server. Just check/update in  
index.php (1) the relative location of the orvfms lib directory (2)  
the relative location  of the css/orvfms.css file. (3) Check/update 
the path of the img directory in css/orvfms.css (below timerButton).
These lines are well marked in index.php with "UPDATE THE PATH".

In order to use the web server software, you may of course run  both the 
server and the  browser in your desktop or laptop when you are connected 
to the local network where the S20s are installed. However, in order to be 
able to operate the S20s from any Internet location, the server must be 
installed in a permanent host attached to the S20s network. For domestic 
applications, a good option is to set up the server on a Raspberry 
Pi, which can be kept powered on with minimal energy consumption and which 
can be simultaneously used by other applications (e.g., media center). 
Of course, if the server has a private address, as it usually happens in 
domestic networks, it will be required to configure the home router with 
Dynamic  DNS and to add appropriate  port forwarding rules to the router. 
These operations are router and network dependent and are beyond the scope 
of this document.

SECURITY

This web server does not offer any particular security against outside
attacks. Please use it at your own risk.  If you intend to  operate it 
from any Internet location, a simple counter measure to mitigate 
the risk is to store the index.php below a directory with a code name 
only known to you (e.g., [DocumentRoot]/s20_myPassCode/index.php), to  
assure that the Document Root directory is not  readable. This option
assumes that  there  are not many attackers knowing this software or 
looking for the control of your home devices :-). This is possibly more 
than enough for most cases, provided that the  devices are not "too risky". 
Of course, this is not "real security", and it is subject to eavesdropping.  
If you want to setup real security you will have to generate your own 
[self signed] certificate, enable HTTPS on your server and setup an 
.htaccess file with username/password permissions (or any other equivalent 
option).

OPERATION OF THE WEBPAGE

The operation is straightforward. Just note that a countdown timer over the 
button in red means "time to switch off", in green "time to switch on", 
and in white "time to switch off after switching on".



