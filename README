
#*************************************************************************
#  Copyright (C) 2015 by Fernando M. Silva   fcr@netcabo.pt                
#*************************************************************************

Last update: 18 October 2015

DISCLAIMER:

     This program was developed independently and it is not
     supported or endorsed in any way by Orvibo (C).

ACKNOWLEDGMENTS:
      This software was based on the information originally published 
      by Andrius Stikonas on 

https://stikonas.eu/wordpress/2015/02/24/reverse-engineering-orvibo-s20-socket/	
      and on comments and discussions by many other users. 

SUMMARY:
  This code implements a web interface to control Orvibo S20 sockets 
  attached to the local network. 

  The S20 switch can be operated  in the local network using the freely
  available WiWo app. However, it is behavior is much less convenient
  when the user is outside the local network. Only switch on and switch off
  operations are remotely supported, and remote operations often fail due to
  timeout. In fact, remote operations through the WiWo app use a remote 
  Orvibo proxy which is often out of service or possibly blocked(?). 
  The purpose of  this software is to setup a web interface in some server 
  in the local network, which may be accessed from any Internet 
  location, supporting the most relevant s20 actions (switch off/on and 
  countdown timers). The web interface is designed such that it may be 
  operated from any type of web brwoser (desktop,pad,smartphone). 
  Furthermore, it reports accurately the satus of the S20, something
  the WiWo app often fails to do.

  The web server can be installed on any computer always on or 
  on a cheap mini server (a Raspberry Pi, for example).

  This web interface reports the status of all S20 attached to the 
  network and supports ON/OFF actions of the detected devices. All
  devices are automatically detected and, therefore, no configuration
  of individual devices is required. The web interface has a responsive 
  behavior to changing viewport sizes, therefore being well suite to either 
  desktops or smartphones. It divides the viewport in N horizontal buttons, 
  each one labeled with the  name automatically retrieved from the 
  connected S20s. Each button is shown in green or red according to the 
  current S20 status (green = ON).

  An example of the web interface is available on web_screenshot.png
 
CONTENTS :
The code contained herein includes:
    orvfms/lib
    -  a php library (orvfms.php) with a set of simple functions to 
       discover S20 device attached to the local network and retrieve of 
       S20 names, addresses and switch state. It also include functions to 
       switch ON/OFF each device.
       This directory also includes several auxliary php files 
       required by the main web page (index.php).

    orvfms/s20/index.php
    -  A php page that implements a web interface to monitor and 
       control S20 sockets attached to the local network. 
 
    orvfms/css
    - The css stylesheet used by index.php

    orvfms/img
    - An icon for the timer clock

TESTING THE CODE:

Before installing this code on a web server, please test if the library 
recognizes and is able to operate your S20s. For this purpose, run the 
test script test.php available in the lib directory from the command line. It 
looks for S20 devices connected to the local network, retrieves relevant data 
and  dump all collected information in readble format to the console.
Moreover, it makes a full power on  / power off cycle to all your S20s and
tests the timer with two 10 seconds countdowns cycles usin a randomly 
choosed device. PLEASE TAKE INTO  ACCOUNT POSSIBLE SAFETY ISSUES  of the 
switching on/off cycle!  Uplug any devices or appliances that nay be affected by 
this test cycle before running test.php.

In order to test this library in command line, just open a  terminal or 
console and take the following steps: 

1. Change the working directory (cd) to the orvfms/lib  directory;
2. Check the file globals.php and please confirm (or update) the broadcast 
   address. Unappily, there is no portable and "clean" way of finding it 
   automatically in the general case, since the host may have more than one 
   network interface. In many cases, the default setting (192.168.1.255)
   will do the job, but please confirm your local address. It will probably 
   be something similar to 192.168.XX.255 or, in rare cases 172.16.XX.255.
3. Check/update the path of the img directory in css/orvfms.css (below
   id timerButton).
4. Check if you do not have appliances connected that may be affected
   by the power on/off cycle. Unplug any devices that you want to spare.
5. Just type in the command line:

prompt> php-cgi test.php

(or replace php-cgi with the name of your php interpreter).

The output is quite straightforward, and possibly you are immediately able
to recognize most of it. You should also see/hear the usual switching on and 
off of the nearby S20s.  An example of the output of this script is included 
in the file orvfms/example.out.

INSTALLATION OF THE WEB PAGE:

The main web page is located in s20/index.php. 

The details of the installation will depend slightly on your HTTP server 
configuration and your own preferences. Anyway, just move the index.php, 
css/orvfms.css and  orvfms/lib/* to the directories that suit the local 
hierarchy and configuration of your HTTP server. Just check/update in  
index.php (1) the relative location of the orvfms lib directory (2)  
the relative location  of the css/orvfms.css file. These two lines are 
well marked in index.php with "UPDATE THE PATH".

In order to use the web server software, you may of course run  both the 
server and the  browser in your desktop or laptop when you are connected 
to the local network where the S20s are installed. However, in order to be 
able to operate the S20s from any Internet location, the server must be 
installed in a permanent host attached to the S20s network. For domestic 
applications, a good option is to set up the server on a Raspberry 
Pi, which can be kept powered on with minimal energy consumption and which 
can be simultaneously used by other applications (e.g., media center). 
Of course, if the server has a private address, as it usually happens in 
domestic networks, it will be required to configure the home router with Dynamic 
DNS and to add appropriate  port forwarding rules to the router. These 
operations are router and network dependent and are beyond the scope of this 
document.

This web server does not offers any particular security against outside
attacks. Please use it at your own risk. A simple counter measure to mitigate 
the risk is to store the index.php below a directory with a code name 
only known to you (e.g., [DocumentRoot]/s20_myPassCode/index.php), to be 
sure that the Document Root directory is not  readable and assume that 
there  are not many attackers knowing this software or looking for the 
control of your home devices :-). This is possibly more than enough for 
most cases, provided that the  devices are not "too risky". Of course, this 
is not "real security", and it is subject to eavesdropping.  If you want to 
setup real security you will have to generate your own [self signed] 
certificate, enable HTTPS on your server and setup an .htaccess file with 
username/password permissions (or any other eequivalent option).

OPERATION OF THE WEBPAGE

The operation is straightforward. Just note that a countdown timer over the 
button in red means "time to switch off", in green "time to switch on", 
and in white "time to switch off after switching on".

Please note that in this version:
1. Currently, only countdown timers (set and display) are supported;
2. Time to switch off after switch on, if enabled, is displayed in white.
However, changing / setting this timer is not yet supported.
3. The timer page if functional, but lacks styling.


